<p align="center">
  <a href="http://nestjs.com/" target="blank"><img src="https://nestjs.com/img/logo_text.svg" width="320" alt="Nest Logo" /></a>
</p>

What is this app?

This application is a project created by me, it's an authentification project with email and password with NestJS. Thus we can easily link any api that need authentification actions (like api that need an authentification).

For manage this, application use refresh token and access token for identificate user.

Refresh token is given at login, and allow user to get an access token. (Long live)

Access token permit user to use any api that need to identificate user for using it. (Short live)

When access token expired, user can refresh it thanks to his refresh token.

So application is stateless for access token.

Support these following features: 

- Register user with email and password.
- Login user and logout user.
- Support forget password and reseting it with email.
- Get new access token thanks to refresh token.

If you want to link any api with access token security, you just need to use `@UseGuards(JwtAccessTokenAuthGuard)` at controller level.

This Nest Application using `monorepo mode`, check this for more information about architecture: https://docs.nestjs.com/cli/monorepo

I) Prerequisite

- Install MongoDb

II) How to install ?

1) Install all dependencies

`npm install`

2) Create `.dev.env` & `.test.env`

`.dev.env` contains all variables environment for dev.

`.test.env` contains all variables environment for test.

Note: 
*Dont' forget* to use different mongo string connection for test env file & dev env file, otherwise your dbs will be deleted each time you run test.

I gave you a fake `.example.env` in order to not forget any environment variable.

Each variables have purpose description.

3) Create or use gmail adress

In order to send email reset password, we need a valid gmail adress (only work for gmail adress)

Don't forget to allow  **Less secure app access** from this gmail email.

_Check this https://hotter.io/docs/email-accounts/secure-app-gmail/ for instruction._


4) Run application:

`npm run start:dev`

5) Learn how to use application:

Access to Swagger documentation at `http://localhost:${PORT_AUTH_APPS}/api`

Read `auth-controller-graph.mdk` in `\apps\auth\auth-controller-graph.mkd` for more details about business logic.


III) Testing:

I repeat :
*Dont' forget* to use different mongo string connection for test env file & dev env file, otherwise your dbs will be deleted each time you run test.

run `npm run test`

Be careful, don't remove `--runInBand` flag, since test has to be run sequentially, otherwise test E2E will be in confilct since their are using and handle the same db.

For now coverage are arround 90%.

IV) Things to know

Application use rate limit, based on configuration parameters.

We use a `ClassValidation` exception filter for all DTO class from user request in order to validate body.

Thanks to JwtStrategy we can use AuthGuard based on these strategy in order to validate validity of Jwt token directly in AuthGuard.

And we can also get directly the decoded payload jwt token at parameter level in controller, with @DecodedToken().

We use `HashPassword` decorator in order to hash user password form user request at controller level.

We use a lot of Swagger decorator in controller.

V) Add api that require access token authorization

If you want to link any api with access token security, you just need to use `@UseGuards(JwtAccessTokenAuthGuard)` at controller level.

If you want to get payload from this, act like other strategy and use `@DecodedToken()` at controller level as parameter.

TODOS:

- [ ] Check if user is banned
- [ ] Class validation at mongo level?
- [ ] Revoir les types de swagger
- [ ] public et private function class
- [x] Exception filter global default
- [x] Error handling if user email credential are wrong in .env or forget to allow secure app 
- [ ] Formater ce README en mode propre
- [ ] Revoir les devDependencies and dependencie in package.json

- [ ] Create api hello
- [ ] Implement front
- [ ] Generate real link for reset password email
- [ ] Implement Docker
