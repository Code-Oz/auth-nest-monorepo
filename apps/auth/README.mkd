
POST `/register`
```mermaid
sequenceDiagram

    AuthController->>AuthRegisterService: /register
    alt wrong format
        AuthRegisterService->>AuthController: Error
    end

    AuthRegisterService->>UserDatabaseService: check if user exist in DB
    activate UserDatabaseService
    alt user already exist
        UserDatabaseService->>AuthRegisterService: Error
        deactivate UserDatabaseService
        AuthRegisterService->>AuthController: Error
    end

    AuthRegisterService->>TokenDatabaseService: check if refresh token exist for this user
    activate TokenDatabaseService
    alt token already exist
        TokenDatabaseService->>AuthRegisterService: Error
        deactivate TokenDatabaseService
        AuthRegisterService->>AuthController: Error
    end

    AuthRegisterService->>UserDatabaseService: Save user in DB
    AuthRegisterService->>AuthController: return response
        
    participant AuthController
    participant AuthRegisterService

    participant UserDatabaseService
    participant TokenDatabaseService
```


PUT `/access_token`

```mermaid
sequenceDiagram

    AuthController->>AuthRefreshTokenService: /access_token
    alt invalid token
        AuthRefreshTokenService->>AuthController: Error
    end

    AuthRefreshTokenService->>TokenDatabaseService: check if refresh token is available
    activate TokenDatabaseService
    alt token not available
        TokenDatabaseService->>AuthRefreshTokenService: Error
        deactivate TokenDatabaseService
        AuthRefreshTokenService->>AuthController: Error
    end

    JwtAccessTokenProvider->>AuthRefreshTokenService: Generate Access token for user

    AuthRefreshTokenService->>TokenDatabaseService: Save refresh token in DB
    AuthRefreshTokenService->>AuthController: Return refresh & access token
        
    participant AuthController
    participant TokenDatabaseService

    participant JwtAccessTokenProvider
```

POST `/login`

```mermaid
sequenceDiagram

    AuthController->>AuthService: /login
    alt invalid token
        AuthService->>AuthController: Error
    end

    AuthService->>TokenDatabaseService: check if refresh token is available
    activate TokenDatabaseService
    alt token not available
        TokenDatabaseService->>AuthService: Error
        deactivate TokenDatabaseService
        AuthService->>AuthController: Error
    end

    JwtAccessTokenProvider->>AuthService: Generate Access token for user

    AuthService->>TokenDatabaseService: Save refresh token in DB
    AuthService->>AuthController: Return refresh & access token
        
    participant AuthController
    participant TokenDatabaseService

    participant JwtAccessTokenProvider
```

Module architecture


```mermaid
graph TB

    subgraph AccessTokenModuleSubgraph
        AccessTokenModule-->JwtAccessTokenProvider
        AccessTokenModule-->JwtAccessTokenStrategy
    end
        AccessTokenModule-.->JwtService

    subgraph RefreshTokenModuleSubgraph
        RefreshTokenModule-->JwtRefreshTokenProvider
        RefreshTokenModule-->JwtRefreshTokenStrategy
        RefreshTokenModule-->JwtRefreshDatabaseService
    end
        RefreshTokenModule-.->MongoService
        RefreshTokenModule-.->JwtService

    subgraph UserModuleSubgraph
        UserModule-->UserDatabaseService
    end
        UserModule-.->MongoService

    subgraph AuthModuleSubgraph
        AuthController-->AuthService
        AuthService-->AccessTokenModule
        AuthService-->RefreshTokenModule
        AuthService-->UserModule
    end
```

## TokenProvider

Use JwtService to generate token from secret key from module.

## TokenStrategy

Use JwtService to check the validity of token from secret key from module.
It's use thanks to @UseGuards(AuthGuard("name of strategy"))
Don't forget to name strategy.

## DatabaseService

Layer between Business logic and database.

## AuthService

User logic. Check is user credential are available.

